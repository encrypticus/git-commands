Самые распространенные и полезные команды:


git remote show origin - Выводятся URL-адрес удаленного репозитория и информация об отслеживаемых ветках.


git remote add application https://github.com/badcoderspaik/application - добавление в локальную базу данных
удаленного репозитория с именем application, ссылающегося на удаленный репозиторий https://github.com/badcoderspaik/application
Следует понимать, что эта команда всего лишь добавляет локальный псевдоним для удаленного репозитория и
используется для удобства


                        Псевдонимы в Git


Перед тем как закончить эту главу, посвященную основам Git, дадим один совет,
который сделает вашу работу с системой Git проще, удобнее и привычнее. Речь
идет о псевдонимах (aliases).
При неполном вводе команды Git не пытается догадаться, что за команду вы имели в виду. Но если мысль о вводе длинных команд вас не привлекает, команда git
config позволяет легко создать псевдоним для любой из них. Вот пара примеров
ее применения:
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
Теперь вместо команды git commit достаточно будет ввести git ci. По мере освоения Git вам, скорее всего, придется часто пользоваться и другими командами; не
стесняйтесь создавать для них псевдонимы.
Кроме того, эта техника позволяет создавать команды, которых, с вашей точки зрения, не хватает. К примеру, чтобы устранить функциональную проблему, с которой
мы столкнулись при отмене индексирования файла, можно добавить псевдоним
unstage:
$ git config --global alias.unstage 'reset HEAD --'
После этого следующие команды станут эквивалентными:
$ git unstage fileA
$ git reset HEAD fileA
В таком виде все выглядит понятнее. Также пользователи частенько добавляют
команду, выводящую последние коммиты:
$ git config --global alias.last 'log -1 HEAD'66 Глава 2 • Основы Git
Теперь для просмотра последнего коммита достаточно написать:
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date: Tue Aug 26 19:48:51 2008 +0800
test for current head
Signed-off-by: Scott Chacon <schacon@example.com>
Можно сказать, что Git просто заменяет новые команды созданным вами псевдонимом. А что делать в случае, когда нужно запустить внешнюю команду, а не
команду, встроенную в Git? Такую команду следует начинать с символа !. Этот
прием часто применяется при написании собственных инструментов для работы
с Git-репозиторием. Вот пример создания псевдонима для команды git visual,
служащей для запуска gitk:
$ git config --global alias.visual "!gitk"


                      Работа с ветками:
                      
git branch [branch_name] - создание новой локальной ветки с именем branch_name


git checkout [branch_name] - переключение на ветку branch_name


git checkout [хеш коммита(можно 7цифр)] - переключение на коммит с указанным хешем


git checkout -b [branch_name] - создание новой локальной ветки и именем branch_name и сразу же переключение на нее


git checkout -b [branch_name] origin/[branch_name] - создание новой локальной ветки с именем branch_name, переключение на нее,
а также ее установка на слежение за удаленной веткой origin/[branch_name]


git checkout --track origin/[branch_name] - создание новой локальной ветки с таким же именем, как и у удаленной - 
в данном случае branch_name - и переключение нее


git merge [branch_name] - слияние ветки branch_name с текущей веткой


git branch -d [branch_name] - удаление локальной ветки branch_name


git push origin --delete [branch_name] - удаление удаленной ветки branch_name 


git branch - вывод списка всех имеющихся локальных веток на экран


git branch --merged - вывод списка всех слитых с текущей веток


git --no-merged - вывод всех неслитых с текущей веток


git branch -vv - Получить список веток наблюдения позволяет параметр -vv команды git branch.
В результате выводится перечень локальных веток с дополнительной информацией, касающейся того, за чем следит каждая ветка и на сколько она опережает
соответствующую ветку на удаленном сервере или отстает от нее:
$ git branch -vv
iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets
master 1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
testing 5ea463a trying something new
Здесь мы видим, что ветка iss53 связана с веткой origin/iss53 и при этом запись
«ahead 2» означает наличие двух локальных коммитов, пока не отправленных на
сервер. Наша ветка master связана с веткой origin/master и содержит актуальную информацию. А вот ветка serverfix, связанная с веткой server-fix-good на
сервере teamone, помечена как «ahead 3, behind 1», то есть на сервере существует
коммит, который в нее пока не слит, а на ней присутствуют три коммита, пока не
отправленные на сервер. Наконец, мы видим, что ветка testing не связана ни
с одной удаленной веткой.
Отметим, что все цифры представляют собой показатели, зафиксированные
в момент последнего скачивания данных с каждого сервера. Данная команда не
обращается к серверам, а просто сообщает локальные данные из кэша. Для получения актуальной информации о количестве новых коммитов на локальных и
удаленных ветках следует извлечь данные со всех удаленных серверов и только
затем воспользоваться этой командой. Это можно сделать так: $ git fetch --all;
git branch -vv.


git fetch origin - ищет сервер с именем "origin" , извлекает оттуда все пока отсутствующие у вас данные, обновляет
вашу локальную базу данных и сдвигает указатель origin/master на новую более актуальную позицию. Получение новых
удаленных веток при скачивании данных не означает автоматического появления их даступных для редактирования
копий


git push origin [branch_name] - отправка данных в репозиторий origin в ветку branch_name


                 Работа с тегами:
                
git tag [имя тега] - создание тега
git tag - вывести список тегов


             Отмена изменений:


git checkout [имя файла] - если изменить файл в рабочем каталоге, но не проиндексировать
его, то эта  команда отменит изменение файла в рабочем каталоге, и переключит в версию файла в репозитории.








































































































































































































































































































$ git commit -m "any comment" - коммит


$ git remote add origin https://github.com/badcoderspaik/pokazaniya.git - удаленное создание ветки origin


$ git push -u origin master - добавление изменений в удаленный репозиторий ветки origin


$ git config --list - выводит список всех текущих настроек


$ git config --global core.editor путь к файлу редактора - выбор редактора для отправки коммитов


$ git clone https://github.com/libgit2/libgit2 - клонирует репозиторий по указанному адресу


$ git clone https://github.com/libgit2/libgit2 mylibgit - Эта команда делает то же самое, что и предыдущая, но все файлы оказываются в папке mylibgit